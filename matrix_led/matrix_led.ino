#include <Arduino.h>

#define LEDARRAY_D 2
#define LEDARRAY_C 3
#define LEDARRAY_B 4
#define LEDARRAY_A 5
#define LEDARRAY_G 6
#define LEDARRAY_DI 7
#define LEDARRAY_CLK 8
#define LEDARRAY_LAT 9
#define led 13

#define CANVAS_WIDTH 64   // width of the canvas

int sc = 0;               // shift count
unsigned char display_buffer[16][CANVAS_WIDTH / 8];
const unsigned char canvas[] =
{
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x10, 0x80, 0x10, 0x20, 0x08, 0x10, 0x01, 0x00, 0x20, 0x40, 0x04, 0x00, 0x00, 0x90, 0x20, 0x40, 0x81, 0x10, 0x08, 0x28, 0x03, 0x80, 0x03, 0x80, 0x03, 0x80, 0x03, 0x80,
0x10, 0xfe, 0x7c, 0x20, 0x10, 0x10, 0x7f, 0xfe, 0x10, 0x40, 0x04, 0x00, 0x00, 0x90, 0x10, 0x40, 0x61, 0x10, 0x7f, 0x24, 0x07, 0xc0, 0x07, 0xc0, 0x07, 0xc0, 0x07, 0xc0,
0x7d, 0x4a, 0x10, 0xf8, 0xfe, 0x7c, 0x48, 0x02, 0x00, 0x40, 0xf4, 0x04, 0xf7, 0x9e, 0x00, 0x40, 0x2f, 0xfe, 0x08, 0x20, 0x07, 0xc0, 0x07, 0xc0, 0x07, 0xc0, 0x07, 0xc0,
0x13, 0x4a, 0xfe, 0x28, 0x92, 0x10, 0x8f, 0xf4, 0xfc, 0x48, 0x9f, 0xbe, 0x90, 0x90, 0xfc, 0x48, 0x01, 0x10, 0xff, 0xfe, 0x07, 0xc0, 0x07, 0xc0, 0x07, 0xc0, 0x07, 0xc0,
0x11, 0xfa, 0x54, 0xa8, 0xfe, 0x10, 0x08, 0x20, 0x0b, 0xfc, 0x94, 0xa4, 0x90, 0x90, 0x0b, 0xfc, 0x81, 0xf0, 0x08, 0x20, 0x07, 0xc0, 0x07, 0xc0, 0x07, 0xc0, 0x07, 0xc0,
0xfe, 0x42, 0x92, 0x68, 0x92, 0xfe, 0x14, 0x40, 0x10, 0x40, 0x94, 0xa4, 0x97, 0x9e, 0x10, 0x40, 0x60, 0x40, 0xff, 0xa0, 0x03, 0x80, 0x03, 0x80, 0x03, 0x80, 0x03, 0x80,
0x10, 0x9c, 0x7c, 0x4a, 0xfe, 0x38, 0x23, 0x80, 0x38, 0x40, 0x94, 0xa4, 0x90, 0x90, 0x38, 0x40, 0x2f, 0xfe, 0x7f, 0x24, 0x03, 0x80, 0x03, 0x80, 0x03, 0x80, 0x03, 0x80,
0x10, 0xfe, 0x10, 0x8a, 0x29, 0x54, 0x0c, 0x60, 0x54, 0x40, 0x94, 0xa4, 0x90, 0x90, 0x54, 0x40, 0x08, 0x42, 0x49, 0x28, 0x03, 0x80, 0x03, 0x80, 0x03, 0x80, 0x03, 0x80,
0x5d, 0x4a, 0xfe, 0x0e, 0x29, 0x12, 0x30, 0x1e, 0x94, 0x40, 0x94, 0xa4, 0x90, 0x90, 0x94, 0x40, 0x1a, 0x52, 0x7f, 0x30, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00,
0x53, 0xfa, 0x01, 0x00, 0x2a, 0x90, 0xcf, 0xe4, 0x10, 0x40, 0xf4, 0xa4, 0xf7, 0x9e, 0x10, 0x40, 0x29, 0x4a, 0x49, 0x20, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00,
0x50, 0x42, 0x7f, 0xfc, 0x2f, 0xd0, 0x08, 0x20, 0x10, 0x44, 0x88, 0xa4, 0x90, 0x90, 0x10, 0x44, 0xca, 0xd6, 0x7f, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x60, 0x9c, 0x02, 0x04, 0x28, 0x12, 0x08, 0x20, 0x17, 0xfe, 0x0a, 0xbc, 0x00, 0x90, 0x17, 0xfe, 0x4c, 0x62, 0x08, 0x22, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00,
0x98, 0x00, 0x04, 0x04, 0xc4, 0x02, 0x0f, 0xe0, 0x10, 0x00, 0x11, 0x24, 0x01, 0x10, 0x10, 0x00, 0x48, 0x46, 0xff, 0x94, 0x03, 0x80, 0x03, 0x80, 0x03, 0x80, 0x03, 0x80,
0x07, 0xfe, 0x18, 0x18, 0x03, 0xfe, 0x08, 0x20, 0x10, 0x00, 0x20, 0x00, 0x02, 0x10, 0x10, 0x00, 0x48, 0x42, 0x08, 0x08, 0x03, 0x80, 0x03, 0x80, 0x03, 0x80, 0x03, 0x80,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00,
};

void setup()
{
  pinMode(LEDARRAY_D, OUTPUT); 
  pinMode(LEDARRAY_C, OUTPUT);
  pinMode(LEDARRAY_B, OUTPUT);
  pinMode(LEDARRAY_A, OUTPUT);
  pinMode(LEDARRAY_G, OUTPUT);
  pinMode(LEDARRAY_DI, OUTPUT);
  pinMode(LEDARRAY_CLK, OUTPUT);
  pinMode(LEDARRAY_LAT, OUTPUT);

  Clear_Display();
  sc = 0;
}


void loop()
{
  unsigned int i;
  
  shift_display_buffer(sc);
  for(i = 0; i < 10; i++) {     // panning speed
    Display();
  }
  sc++;
  if(sc >= (sizeof(canvas) * 8 / 16 - CANVAS_WIDTH))
    sc = 0;
}


void Clear_Display()
{
  memset(display_buffer, 0, 16 * (CANVAS_WIDTH / 8));
}

void shift_display_buffer(int sc)
{
  int w = sizeof(canvas)/16;
  int x, y;

  int bytes = sc / 8;
  short low_bits = sc % 8;
  short high_bits  = 8 - low_bits;
  short low_mask  = 0xff >> low_bits;
  short high_mask = 0xff ^ low_mask;
  
  for(y = 0; y < 16; y++) {
    for(x = 0; x < (CANVAS_WIDTH / 8); x++) {
      if(low_bits != 0) {
        display_buffer[y][x] =
          ((canvas[y * w + x + bytes    ] & low_mask ) << low_bits) |
          ((canvas[y * w + x + bytes + 1] & high_mask) >> high_bits);
      } else {
        display_buffer[y][x] = canvas[y * w + x + bytes];
      }
    }
  }
}

void Display()
{
  int i, j;

  for(i = 0; i < 16; i++) {
    digitalWrite(LEDARRAY_G, HIGH);	// Turn off LED
    for(j = (CANVAS_WIDTH/8 - 1); j >= 0; j--) {        // shift register = in reverse order
      Send(~(unsigned char)display_buffer[i][j]);
    }

    digitalWrite(LEDARRAY_LAT, HIGH);	// Latch the data line
    delayMicroseconds(1);
  
    digitalWrite(LEDARRAY_LAT, LOW);
    delayMicroseconds(1);

    Scan_Line(i);
    
    digitalWrite(LEDARRAY_G, LOW);	// Turn on LED
    
    delayMicroseconds(300);		// LED needs some time to get brighter
  } 
}

void Scan_Line(unsigned char m)
{ 
  digitalWrite(LEDARRAY_D, (m & 0x08) >> 3);
  digitalWrite(LEDARRAY_C, (m & 0x04) >> 2);
  digitalWrite(LEDARRAY_B, (m & 0x02) >> 1);
  digitalWrite(LEDARRAY_A, (m & 0x01));
}

void Send(unsigned char dat)
{
  unsigned char i;
  digitalWrite(LEDARRAY_CLK, LOW);
  delayMicroseconds(1);
  digitalWrite(LEDARRAY_LAT, LOW);
  delayMicroseconds(1);

  for(i = 0 ;i < 8 ; i++) {
    digitalWrite(LEDARRAY_DI, dat & 0x01);

    digitalWrite(LEDARRAY_CLK, HIGH);       // Raising edge
    delayMicroseconds(1);
    digitalWrite(LEDARRAY_CLK, LOW);
    delayMicroseconds(1);
    dat >>= 1;
  }     
}
